#!/usr/bin/env node


// Requirements =============================

var fs = require('fs'),
	watch = require('node-watch'),
	jade = require('jade'),
	ejs = require('ejs'),
	marked = require('marked'),
	stylus = require('stylus'),
	sass = require('node-sass'),
	coffee = require('coffee-script'),
	less = require('less'),
	yuicompressor = require('yuicompressor'),
	htmlminifier = require('html-minifier'),
	exec = require('child_process').exec,
	http = require('node-static');

// Fundamentals =============================

var exit = function(){ process.kill(); }
var black = '\x1b[30m';
var red = '\x1b[31m';
var green = '\x1b[32m';
var yellow = '\x1b[33m';
var blue = '\x1b[34m';
var magenta = '\x1b[35m';
var cyan = '\x1b[36m';
var reset = '\x1b[39;49m';
var is_win = /^win/.test(process.platform);
var sp = (is_win)? '\\' : '/'; 

var showError = function(e,fi){
	console.error(red+'\n'+e+'\n');
	console.error(e.stack);
	if(fi){
		console.error('on ' + fi.relative + sp + fi.base +'\n'+reset);
	}
}

var createDirs = function(fi){
	var dirs = fi.relative.split(sp);
	var dirslen = dirs.length
	for(var i=0;i<dirslen;i++){
		var dir = dirs.slice(0,i+1).join(sp);
		if(!fs.existsSync(www+sp+dir)){
			fs.mkdirSync(www+sp+dir);
		}
	}
}

var cpFileSync = function(from, to){
	fs.createReadStream(from).pipe(fs.createWriteStream(to));
}

var rmdirRecurSync = function(path) {
    var files = [];
    if( fs.existsSync(path) ) {
        files = fs.readdirSync(path);
        files.forEach(function(file,index){
            var curPath = path + sp + file;
            if(fs.statSync(curPath).isDirectory()) { // recurse
                rmdirRecurSync(curPath);
            } else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(path);
    }
};

var fileinfo = function(s,root){
	var t = s.split(sp);

	var base = '';
	var parent = '';
	if(t[t.length-1] == ''){
		base =  t[t.length-2];
		parent_folder = t[t.length-3];
	}else{
		base = t[t.length-1];
		parent_folder = t[t.length-2];
	}

	if(base === undefined){
		base = '';
	}

	var hidden = (base[0] == '.');
	var has_ext = false;
	if(hidden){
		has_ext = base.slice(1).indexOf('.') > -1;
	}else{
		has_ext = base.indexOf('.') > -1;
	}
	var ext = '';
	var subext = '';
	var name = '';
	if(has_ext){
		ext = base.split('.')[1];
		extlen = ext.length+1;
		sub_test = base.split('.');
		name = base.slice(0,-extlen);

		if(sub_test.length == 3){
			subext = sub_test[1];
			ext = sub_test[2];
			extlen = ext.length+1;
			name = sub_test[0];
		}else{
			subext = '';
		}
		
		
	}
	var parent_path;
	if(is_win){
		parent_path = s.replace(/(.+)\\.*?$/, '$1');
	}else{
		parent_path = s.replace(/(.+)\/.*?$/, '$1');
	}
	var relative = parent_path.replace(root,'');
	if(relative[0] == sp){
		relative = relative.slice(1);
	}
	var dat = {
		name: name,
		base: base,
		hidden: hidden,
		has_ext: has_ext,
		ext: ext,
		subext: subext,
		parent_folder: parent_folder,
		parent_path: parent_path,
		relative: relative
	};

	return dat;
}

global.globals = {current:{}};

var fl_compile = function(filename){
	var fi = fileinfo(filename,root);
	var dir = fi.relative;
	var content = '';

	if(fi.relative.slice(0,3) == 'www'){
		return;
	}

	if(fi.ext != 'json'){
		var dirs = fi.relative.split(sp);
		var dirslen = dirs.length;
		for(var i=0;i<dirslen;i++){
			if( dirs[0][0] == '_' 
				|| dirs[0][0] == '.' 
				|| fi.base[0] == '_'
				|| fi.base[0] == '.'){
				// console.log(magenta+'skipped: '+magenta+fi.relative+sp+fi.base+reset);
				return;
			}
		}
	}

	if(fi.has_ext){
		switch(fi.ext){
			case 'json':
			case 'jade':
			case 'styl':
			case 'md':
			case 'ejs':
			case 'coffee':
			case 'sass':
			case 'scss':
			case 'less':
			case 'html':
			case 'htm':
				try{
					var data = fs.readFileSync(filename,'utf8');
					content = data.toString('utf8');
				}catch(e){
					showError(e,fi);
					return;
				}

				break;
		}

		switch(fi.ext){

			case 'json':
				if(fi.base == '_data.json'){
					try{
						var obj = JSON.parse(content);
					}catch(e){
						showError(e,fi);
						return;
					}

					if(!global.globals.hasOwnProperty('public')){
						global.globals['public'] = {};
					}

					global.globals.public[dir] = {};
					global.globals.public[dir]['_data'] = obj;
				}else if(fi.base == '_flute.json'){
					try{
						var obj = JSON.parse(content);
					}catch(e){
						showError(e,fi);
						return;
					}

					if(!global.globals.hasOwnProperty('globals')){
						global.globals['globals'] = {};
					}

					global.globals.globals = obj.globals;
				}

				break;

			case 'jade':
				createDirs(fi);

				var _path = fi.relative.split(sp);
				_path.push(fi.name);

				global.globals.current = {path:_path, source:fi.name};
				global.globals.partial = function(s){
					var text = fs.readFileSync(fi.relative + s);
					return text;
				}

				var html;
				try{
					html = jade.renderFile(filename,global.globals);
				}catch(e){
					showError(e,fi);
					return;
				}
				
				if(fi.subext){
					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.'+fi.subext,html);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.'+fi.subext+reset);
				}else{
					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.html',html);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.html'+reset);
				}
				break;

			case 'styl':
				stylus.render(content, { filename: filename }, function(e, css){
					if(e){
						showError(e,fi);
						return;
					}

					createDirs(fi);

					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.css',css);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.css'+reset);
				});
				break;

			case 'md':
				marked.setOptions({
					breaks: false
				});

				var html;
				try{
					html = marked(content);
				}catch(e){
					showError(e,fi);
					return;
				}

				createDirs(fi);

				fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.html',html);
				console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.html'+reset);
				break;

			case 'ejs':
				var _path = fi.relative.split(sp);
				_path.push(fi.name);

				global.globals['filename'] = filename;
				global.globals.current = {path:_path, source:fi.name};
				global.globals.partial = function(s){
					var text = fs.readFileSync(fi.relative + s);
					return text;
				}

				var html;
				try{
					html = ejs.render(content,global.globals);
				}catch(e){
					showError(e,fi);
					return;
				}

				createDirs(fi);

				if(fi.subext){
					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.'+fi.subext,html);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.'+fi.subext+reset);
				}else{
					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.html',html);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.html'+reset);
				}

				break;

			case 'coffee':
				try{
					var _js = coffee.compile(content);
					var target = www+sp+fi.relative+sp+fi.name+'.js';

					createDirs(fi);
					fs.writeFileSync(target,_js);

					yuicompressor.compress(target, {
					    charset: 'utf8',
					    type: 'js',
					    nomunge: true
					}, function(e, data, extra) {
						if(e){
							showError(e,fi);
							return;
						}else{
							fs.writeFileSync(target,data);
							console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.js'+reset);
						} 
					});
				}catch(e){
					showError(e,fi);
					return;
				}

				break;

			case 'sass':
			case 'scss':
				try{
					var css = sass.renderSync({
						data: content,
						outputStyle: 'compressed'
					});

					createDirs(fi);

					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.css',css);
					console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.css'+reset);
				}catch(e){
					showError(e,fi);
					return;
				}

				break;
			case 'less':
				less.render(content, function (e, _css) {
					var target_css = www+sp+fi.relative+sp+fi.name+'.css';
				    createDirs(fi);
				    fs.writeFileSync(target_css,_css);

				    yuicompressor.compress(target_css, {
					    charset: 'utf8',
					    type: 'css',
					    nomunge: true
					}, function(e, data, extra) {
						if(e){
							showError(e,fi);
							return;
						}else{
							fs.writeFileSync(target_css,data);
							console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.css'+reset);
						} 
					});
				});
				break;
			case 'js':
				try{
					var target = www+sp+fi.relative+sp+fi.base;
					createDirs(fi);

					target = target.replace('//','/');

					cpFileSync(filename,target);

					yuicompressor.compress(target, {
					    charset: 'utf8',
					    type: 'js',
					    nomunge: true
					}, function(e, data, extra) {
						if(e){
							showError(e,fi);
							return;
						}else{
							fs.writeFileSync(target_css,data);
							console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.js'+reset);
						} 
					});
				}catch(e){
					showError(e,fi);
					return;
				}
				break;
			case 'css':
				var target_css = www+sp+fi.relative+sp+fi.base;
			    createDirs(fi);

			    cpFileSync(filename,target_css);

			    yuicompressor.compress(target_css, {
				    charset: 'utf8',
				    type: 'css',
				    nomunge: true
				}, function(e, data, extra) {
					if(e){
						showError(e,fi);
						return;
					}else{
						fs.writeFileSync(target_css,data);
						console.log(green+'compiled: '+yellow+fi.relative+sp+fi.name+'.css'+reset);
					} 
				});
				break;
			// case 'jpg':
			// case 'jpeg':
			// 	try{
			// 		var target = www+sp+fi.relative+sp+fi.name+'.'+fi.ext;
			// 		target = target.replace('//','/');

			// 		cpFileSync(filename,target);

			// 		console.log(blue+'compressing... '+yellow+fi.relative+sp+fi.base+reset);
			// 		var _ = exec('jpegoptim -m80 -q '+target, function(err, stdout, stderr) {
			// 			if (err) {
			// 				showError(err,fi);
			// 				return;
			// 			} else {
			// 				console.log(blue+'compressed: '+yellow+fi.relative+sp+fi.base+reset);
			// 			}
			// 		});
			// 	}catch(e){
			// 		showError(e,fi);
			// 		return;
			// 	}
			// 	break;
			// case 'gif':
			// case 'png':
			// 	try{
			// 		var target = www+sp+fi.relative+sp+fi.name+'.'+fi.ext;
			// 		target = target.replace('//','/');

			// 		cpFileSync(filename,target);

			// 		console.log(blue+'compressing... '+yellow+fi.relative+sp+fi.base+reset);
			// 		var _ = exec('optipng -o1 -keep -out '+target+' '+filename, function(err, stdout, stderr) {
			// 			if (err) {
			// 				showError(err,fi);
			// 				return;
			// 			} else {
			// 				fs.unlink(target+'.bak');
			// 				console.log(blue+'compressed: '+yellow+fi.relative+sp+fi.base+reset);
			// 			}
			// 		});
			// 	}catch(e){
			// 		showError(e,fi);
			// 		return;
			// 	}
			// 	break;
			case 'html':
			case 'htm':
				try{
					var html = htmlminifier.minify(content, {
						removeComments: true,
						removeCommentsFromCDATA: true,
						collapseWhitespace: true,
						collapseBooleanAttributes: true,
						removeAttributeQuotes: true,
						removeEmptyAttributes: true
					});

					createDirs(fi);

					fs.writeFileSync(www+sp+fi.relative+sp+fi.name+'.html',html);
					console.log(cyan+'compressed: '+yellow+fi.relative+sp+fi.name+'.html'+reset);
				}catch(e){
					showError(e,fi);
					return;
				}
				break;
			default:
				try{
					createDirs(fi);
					cpFileSync(filename, www+sp+fi.relative+sp+fi.base);
					console.log(cyan+'copied: '+yellow+fi.relative+sp+fi.base+reset);
				}catch(e){
					showError(e,fi);
					return;
				}
				break;
		}
	}
}

var root = process.cwd().slice();
var args = process.argv.slice(2);
var www = root+sp+'www';

if(fs.existsSync(www)){
	rmdirRecurSync(www);
}

fs.mkdirSync(www);

// Main =============================

var _ = exec('find '+root+' -type d -name ".git" -type d -name "www" -prune -o -type f -print ', function(err, stdout, stderr) {
	if (err) {
		showError(err,null);
		exit();
	}

	var files = stdout.split('\n');
	var flen = files.length;
	var reserved = [];

	for(var i=0;i<flen;i++){
		var filename = files[i];
	    var fi = fileinfo(filename);

	    if(fi.has_ext && fi.ext == 'json'){
	    	fl_compile(filename);
		}else{
			reserved.push(filename);
		}
	}

	var reslen = reserved.length;

	for(var i=0;i<reslen;i++){
	    fl_compile(reserved[i]);
	}

	// static server
	// console.log('\n' + reset + 'Server started on http://localhost:9000/' + reset +'\n');

	// var file = new http.Server('./www');
	// require('http').createServer(function (request, response) {
	//     request.addListener('end', function () {
	//         file.serve(request, response);
	//     }).resume();
	// }).listen(9000);

	watch(root, {recursive:true}, function(filename){
		// var fi = fileinfo(filename);
		// if(fi.base == '_data.json' || fi.base == '_flute.json'
		// 	|| fi.ext == 'jade' || fi.ext == 'ejs'){

		// 	var _ = exec('find '+root+' -type d -name ".git" -type d -name "www" -prune -o -type f -print', function(err, stdout, stderr) {
		// 		if (err) {
		// 			showError(err,fi);
		// 			exit();
		// 		}

		// 		var files = stdout.split('\n');
		// 		var flen = files.length;

		// 		for(var i=0;i<flen;i++){
		// 		    var filename = (_root+sp+_stat.name);
		// 		    var fi = fileinfo(filename);

		// 		    if(fi.has_ext && (fi.ext == 'jade' || fi.ext == 'ejs')){
		// 		    	fl_compile(filename);
		// 			}
		// 		}
		// 	});
		// }else{
			fl_compile(filename);
		// }
	});
});